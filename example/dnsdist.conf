newServer({address="127.0.0.1:10054", pool="resolver"})
newServer({address="127.0.0.1:10053", pool="auth"})
allow_query = newNMG()
allow_query:addMask("0.0.0.0/0")
allow_query:addMask("::0")
allow_recursion = newNMG()
allow_recursion:addMask("10.0.0.0/8")
allow_recursion:addMask("192.168.0.0/16")
allow_recursion:addMask("192.0.2.1")
allow_transfer_global = newNMG()
allow_transfer_global:addMask("10.0.0.1")
allow_transfer = {}
authdomains = newSuffixMatchNode()
authdomains:add(newDNSName("example.com."))
allow_transfer["example.com."] = newNMG()
allow_transfer["example.com."]:addMask("10.0.0.0/8")
allow_transfer["example.com."]:addMask("192.168.0.0/16")
allow_transfer["example.com."]:addMask("192.0.2.1")
authdomains:add(newDNSName("example.jp."))
addLocal("0.0.0.0:53")
addLocal("[::]:53")

pc = newPacketCache(100000)
getPool("resolver"):setCache(pc)

function xfr_query(dq)
        if(dq.qtype == dnsdist.AXFR or dq.qtype == dnsdist.IXFR)
        then
                a = allow_transfer[string.lower(dq.qname:toString())]
		if(not (a))
		then
			a = allow_transfer_global
		end
                if(a:match(dq.remoteaddr))
                then
                	return DNSAction.Pool, "auth"
                end
        end
        return DNSAction.None, ""
end

addAction(NotRule(NetmaskGroupRule(allow_query)),
        RCodeAction(dnsdist.REFUSED))
addAction(AndRule({NotRule(QTypeRule(dnsdist.AXFR)), NotRule(QTypeRule(dnsdist.IXFR)), SuffixMatchNodeRule(authdomains)}), PoolAction("auth"))
addAction(AndRule({NotRule(QTypeRule(dnsdist.AXFR)), NotRule(QTypeRule(dnsdist.IXFR)), NetmaskGroupRule(allow_recursion)}), PoolAction("resolver"))
addLuaAction(".", xfr_query)
addAction(AllRule(), RCodeAction(dnsdist.REFUSED))

setACL({})
addACL("0.0.0.0/0")
addACL("::0/0")
controlSocket("127.0.0.1")
